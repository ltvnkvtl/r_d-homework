{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Swagger HW-6 Application API for Node.js course",
        "description": "Swagger HW-6 Application API for Node.js course",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:3030",
    "basePath": "/api",
    "tags": [
        {
            "name": "Auth",
            "description": "API for auth. Registration, Login, Logout, Refresh. Token logic is here"
        },
        {
          "name": "Users",
          "description": "API for users. Get All, Get One, Update, Delete"
        }
    ],
    "securityDefinitions": {
      "refreshToken": {
        "type": "apiKey",
        "name": "refreshToken",
        "in": "header"
      }
    },
    "schemes": ["http"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/auth/registration": {
          "post": {
            "tags": ["Auth"],
            "summary": "Register (create) new User",
            "description": "Register (create) new User",
            "parameters": [
              {
                "name": "User",
                "in": "body",
                "required": true,
                "description": "Post body to register user. Role can be 'user' or 'admin'. Default role is 'user'. Email and Password required",
                "schema": {
                  "type": "object",
                  "required": ["email", "password"],
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "default": "user"
                    }
                  }
                }
              }
            ],
            "produces": ["application/json"],
            "responses": {
              "200": {
                "description": "User is created",
                "schema": {
                  "$ref": "#/definitions/UserWithTokens"
                },
                "headers": {
                  "Set-Cookie": {
                    "type": "string",
                    "description": "Registration returns a cookie named `refreshToken`. You need to include this cookie in logout and refresh request",
                    "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxOWJiZjM4YTc2YmM2NDRlZWIyMGJlNSIsImVtYWlsIjoiYWRtaW5AbWFpbC5ydSIsInJvbGUiOiJhZG1pbiIsIm5hbWUiOiJBZG1pbiIsImlhdCI6MTYzNzYyMTUyMywiZXhwIjoxNjQwMjEzNTIzfQ.DQ9sYnAI8KfjVhBWS9yBrjquXvYrULlqT53FAsFnOGI"
                  }
                }
              },
              "400": {
                "description": "Bad request. Validation errors. User Already exist",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              },
              "500": {
                "description": "Необработанная ошибка",
                "schema": {
                  "$ref": "#/definitions/Error"
                }
              }
            }
          },
          "put": {
            "tags": ["Tokens"],
            "summary": "Edit user token",
            "description": "Edit user token",
            "parameters": [
              {
                "name": "_id",
                "in": "body",
                "required": true,
                "description": "User ID to edit token",
                "schema": {
                  "type": "object",
                  "required": ["_id"],
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            ],
            "produces": ["application/json"],
            "responses": {
              "200": {
                "description": "User token edited",
                "schema": {
                  "$ref": "#/definitions/Tokens"
                }
              },
              "400": {
                "description": "Empty post body or no 'name' field"
              },
              "404": {
                "description": "User not found"
              }
            }
          }
        },
        "/auth/login": {
        "post": {
          "tags": ["Auth"],
          "summary": "Login with email and password",
          "description": "Login with email and password",
          "parameters": [
            {
              "name": "Credentials",
              "in": "body",
              "required": true,
              "description": "Email and Password to login. Required",
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "Successful login",
              "schema": {
                "$ref": "#/definitions/UserWithTokens"
              },
              "headers": {
                "Set-Cookie": {
                  "type": "string",
                  "description": "Registration returns a cookie named `refreshToken`. You need to include this cookie in logout and refresh request",
                  "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxOWJiZjM4YTc2YmM2NDRlZWIyMGJlNSIsImVtYWlsIjoiYWRtaW5AbWFpbC5ydSIsInJvbGUiOiJhZG1pbiIsIm5hbWUiOiJBZG1pbiIsImlhdCI6MTYzNzYyMTUyMywiZXhwIjoxNjQwMjEzNTIzfQ.DQ9sYnAI8KfjVhBWS9yBrjquXvYrULlqT53FAsFnOGI"
                }
              }
            },
            "400": {
              "description": "Bad request. Validation errors. User not found. Wrong password",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "500": {
              "description": "Необработанная ошибка",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        },
        "put": {
          "tags": ["Tokens"],
          "summary": "Edit user token",
          "description": "Edit user token",
          "parameters": [
            {
              "name": "_id",
              "in": "body",
              "required": true,
              "description": "User ID to edit token",
              "schema": {
                "type": "object",
                "required": ["_id"],
                "properties": {
                  "_id": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "User token edited",
              "schema": {
                "$ref": "#/definitions/Tokens"
              }
            },
            "400": {
              "description": "Empty post body or no 'name' field"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
        "/auth/logout": {
          "post": {
            "tags": ["Auth"],
            "summary": "Logout. ENTER refreshToken HERE(Click lock icon) ------------------------------------------------------->",
            "description": "Logout will delete refreshToken from DB",
            "security": [
              {
                "refreshToken": []
              }
            ],
            "produces": ["application/json"],
            "responses": {
              "200": {
                "description": "Successful logout",
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "tags": ["Tokens"],
            "summary": "Edit user token",
            "description": "Edit user token",
            "parameters": [
              {
                "name": "_id",
                "in": "body",
                "required": true,
                "description": "User ID to edit token",
                "schema": {
                  "type": "object",
                  "required": ["_id"],
                  "properties": {
                    "_id": {
                      "type": "string"
                    }
                  }
                }
              }
            ],
            "produces": ["application/json"],
            "responses": {
              "200": {
                "description": "User token edited",
                "schema": {
                  "$ref": "#/definitions/Tokens"
                }
              },
              "400": {
                "description": "Empty post body or no 'name' field"
              },
              "404": {
                "description": "User not found"
              }
            }
          }
        },
        "/auth/refresh": {
        "get": {
          "tags": ["Auth"],
          "summary": "Logout. ENTER refreshToken HERE(Click lock icon) ------------------------------------------------------->",
          "description": "Logout will delete refreshToken from DB",
          "security": [
            {
              "refreshToken": []
            }
          ],
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "Successful logout",
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Success"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Tokens"],
          "summary": "Edit user token",
          "description": "Edit user token",
          "parameters": [
            {
              "name": "_id",
              "in": "body",
              "required": true,
              "description": "User ID to edit token",
              "schema": {
                "type": "object",
                "required": ["_id"],
                "properties": {
                  "_id": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "User token edited",
              "schema": {
                "$ref": "#/definitions/Tokens"
              }
            },
            "400": {
              "description": "Empty post body or no 'name' field"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
        "/tokens/{userId}": {
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "description": "ID of user that we want to find or delete",
              "type": "string"
            }
          ],
          "get": {
            "tags": ["Tokens"],
            "summary": "Get user token with given ID",
            "responses": {
              "200": {
                "description": "User token is found",
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6ImFkbWluIiwibmFtZSI6IlZpdGFseSIsImlhdCI6MTYzNjQ2ODg5NywiZXhwIjoxNjM2NDk3Njk3fQ.XWVdIKi7kPAHUyDuIRaTYSfYfpqmYq1Fosn5Sc9ANVA"
                }
              },
              "404": {
                "description": "User not found or doesn't have token"
              }
            }
          },
          "delete": {
            "summary": "Delete token with given ID. Only admins with jwt token can delete user token.",
            "tags": ["Tokens"],
            "parameters": [
              {
                "name": "Authorization",
                "in": "header",
                "required": true,
                "description": "JWT token of user",
                "schema": {
                  "type": "string",
                  "format": "jwt",
                  "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwicm9sZSI6InVzZXIiLCJuYW1lIjoiTWFrcyIsImlhdCI6MTYzNjQ2ODgxOCwiZXhwIjoxNjM2NDk3NjE4fQ.itzJ5I0PSyJ9D_-quPPdbNbSnzmUS09WhWVoAUNabWI"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "User token is deleted",
                "schema": {
                  "$ref": "#/definitions/Tokens"
                }
              },
              "403": {
                "description": "Only admins with jwt token can delete users token."
              },
              "404": {
                "description": "User not found or doesn't have token"
              }
            }
          }
        },
        "/users": {
            "get": {
                "tags": ["Users"],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                }
            },
            "post": {
                "tags": ["Users"],
                "summary": "Create new user",
                "description": "Create new user",
                "parameters": [
                    {
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "description": "Post body to create user. Role can be 'user' or 'admin'",
                        "schema": {
                            "type": "object",
                            "required": ["name"],
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string",
                                    "default": "user"
                                }
                            }
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Empty post body or no 'name' field"
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "summary": "Edit user name or role",
                "description": "Edit user name or role",
                "parameters": [
                    {
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "description": "Post body to edit user. Id is required.",
                        "schema": {
                            "type": "object",
                            "required": ["_id"],
                            "properties": {
                                "_id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "role": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Empty post body or no 'name' field"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/{userId}": {
            "parameters": [
                {
                    "name": "userId",
                    "in": "path",
                    "required": true,
                    "description": "ID of user that we want to find or delete",
                    "type": "string"
                }
            ],
            "get": {
                "tags": ["Users"],
                "summary": "Get user with given ID",
                "responses": {
                    "200": {
                        "description": "User is found",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete user with given ID. Only admins with jwt token can delete User.",
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "JWT token of user",
                        "schema": {
                            "type": "string",
                            "format": "jwt",
                            "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwicm9sZSI6InVzZXIiLCJuYW1lIjoiTWFrcyIsImlhdCI6MTYzNjQ2ODgxOCwiZXhwIjoxNjM2NDk3NjE4fQ.itzJ5I0PSyJ9D_-quPPdbNbSnzmUS09WhWVoAUNabWI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is deleted",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "403": {
                        "description": "Only admins with jwt token can delete User."
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "properties": {
                "id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "email": {
                  "type": "string",
                  "uniqueItems": true
                },
                "role": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "UserWithTokens": {
          "properties": {
            "accessToken": {
              "type": "string"
            },
            "refreshToken": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "Error": {
          "properties": {
            "message": {
              "type": "string"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "Tokens": {
            "required": ["_id", "userId", "tokens"],
            "properties": {
                "_id": {
                    "type": "string",
                    "uniqueItems": true
                },
                "userId": {
                    "uniqueItems": true
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
